Thks to phapha <3

01 LOAD M(X)            AC := Mem[X]
02 LOAD -M(X)           AC := -(Mem[X])
03 LOAD |M(X)|          AC := |Mem[X]|)
05 ADD M(X)             AC := AC + Mem[X]
06 SUB M(X)             AC := AC - Mem[X]
07 ADD |M(X)|           AC := AC + |Mem[X]|
08 SUB |M(X)|           AC := AC - |Mem[X]|
09 LOAD MQ,M(X)         MQ := Mem[X]
0A LOAD MQ              AC := MQ
0B MUL M(X)             AC:MQ := MQ × Mem[X]
0C DIV M(X)             MQ := AC / Mem[X]
0D JUMP M(X,0:19)       Salta para a instru¸c˜ao `a
0E JUMP M(X,20:39)      Salta para a instru¸c˜ao `a
0F JUMP+M(X,0:19)       Se AC ≥ 0 ent˜ao salta
10 JUMP+M(X,20:39)      Se AC ≥ 0 ent˜ao salta
12 STOR M(X,8:19)       Move os 12 bits à direita
13 STOR M(X,28:39)      Move os 12 bits à direita
14 LSH                  AC := AC << 1
15 RSH                  AC := AC >> 1
21 STOR M(X)            Mem[X] := AC
